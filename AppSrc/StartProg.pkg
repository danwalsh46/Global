// StartProg.pkg
// Author: Bernhard Ponemayr
// Date: 03.07.2002
//
// replacement for the runprogram command of vdf
//
// Syntax:
// Get gStartProgram Command Parameters Directory WindowVisible WaitUntilFinished to ReturnValue
//
// Parameters:
// Command: is the Program to Run (with or without path)
// Parameters: the Parameters given to the Program
// Directory: the Working Directory of the Program (if blank, the current directory of vdf is used)
// WindowVisible: TRUE if a resulting window is initially visible (may be changed by the program itself)
// WaitUntilFinished: TRUE if the function should wait until the started program is finished
//
// returns:
// -1 If the programm could Not be started
// ProcessID if the programm was started and the WaitUntilFinished Parameter was FALSE
// ExitCode of the started program if the programm was started and the WaitUntilFinished Parameter was TRUE
//
// Example:
// Get gStartProgram "calc.exe" "" "" TRUE FALSE to iRetVal
// Starts the Windows Calculator and returns the ProcessID of calc.exe if successfully or -1
//
// Changelog:
// 07.03.2013 BP: Double Quotes are no added before and after the Commandline to Support
//                long Paths with Blanks inside
// 25.09.2017 WvA: Modernized the code a bit using structs etc.., functionally no changes


Define STARTF_USESHOWWINDOW    FOR |CI$00000001
Define STARTF_USESIZE          FOR |CI$00000002
Define STARTF_USEPOSITION      FOR |CI$00000004
Define STARTF_USECOUNTCHARS    FOR |CI$00000008
Define STARTF_USEFILLATTRIBUTE FOR |CI$00000010
Define STARTF_RUNFULLSCREEN    FOR |CI$00000020  // ignored for non-x86 platforms
Define STARTF_FORCEONFEEDBACK  FOR |CI$00000040
Define STARTF_FORCEOFFFEEDBACK FOR |CI$00000080
Define STARTF_USESTDHANDLES    FOR |CI$00000100
Define STARTF_USEHOTKEY        FOR |CI$00000200

Define STILL_ACTIVE            FOR 259

Struct tSTARTUPINFO
  DWord   cb
  Pointer lpReserved
  Pointer lpDesktop
  Pointer lpTitle
  DWORD   dwX
  DWORD   dwY
  DWORD   dwXSize
  DWORD   dwYSize
  DWORD   dwXCountChars
  DWORD   dwYCountChars
  DWORD   dwFillAttribute
  DWORD   dwFlags
  UShort  wShowWindow
  UShort  cbReserved2
  Pointer lpReserved2
  Handle  hStdInput
  Handle  hStdOutput
  Handle  hStdError
End_Struct

Struct tProcessInfo
  Handle hProcess
  Handle hThread
  DWord  dwProcessId
  DWord  dwThreadId
End_Struct

#IFNDEF Get_CreateProcessEf
  External_Function CreateProcessEf "CreateProcessA" kernel32.dll Pointer pName Pointer pCmdL Pointer lpPAttr Pointer lpTAttr Integer bInherit Integer dwCrFlag Pointer pEnv Pointer lpCurDir Pointer lpStartup Pointer lpProcInfo Returns Integer
#ENDIF
#IFNDEF Get_GetExitCodeProcessEf
  External_Function GetExitCodeProcessEf "GetExitCodeProcess" kernel32.dll Handle hProcess Pointer lpExitCode Returns Integer
#ENDIF
#IFNDEF GET_CloseHandleEf
  External_Function CloseHandleEf "CloseHandle" kernel32.dll Handle hHandle Returns Integer
#ENDIF

//HANDLE WINAPI OpenProcess(
//  _In_  DWORD dwDesiredAccess,
//  _In_  BOOL bInheritHandle,
//  _In_  DWORD dwProcessId
//);
#IFNDEF GET_OpenProcessEf
External_function OpenProcessEf "OpenProcess" kernel32.dll DWord dwAccess Integer bInherit Handle hPID Returns Integer
#ENDIF

//BOOL WINAPI TerminateProcess(
//  _In_  HANDLE hProcess,
//  _In_  UINT uExitCode
//);
#IFNDEF GET_TerminateProcessEf
External_function TerminateProcessEf "TerminateProcess" kernel32.dll Handle hProcess Integer uExitCode Returns Integer
#ENDIF

#IFNDEF GET_SleepEf
External_function SleepEf "Sleep" kernel32.dll Integer iMilliSeconds Returns Integer
#ENDIF
#IFNDEF get_GetLastError
  external_function GetLastError "GetLastError" kernel32.dll Returns Integer
#ENDIF

Function gStartProgram GLOBAL String sCommand String sParams String sDir Integer bVisible Integer bWaitForFinished Returns Integer
    String sCmd sPara sWorkDir sExitCode
    Pointer pCmd pPara pWorkDir pStartup pProcessInfo
    Integer iRet iError iID iExitCode
    Handle hProcess hThread
    tStartupInfo StartupInf  // skipping the "o" due to possible clash with old TYPE definition
    tProcessInfo ProcessInf
    
    // Change 9th of March, 2013 Bernhard Ponemayr
    // In some rare cases the sCommand needs to surrounded by quotes for the CreateProcess function
    // to work properly.
    If (Left(sCommand, 1) <> '"' and (Left(sCommand, 1) <> "'")) Begin
        Move ('"' + sCommand + '"') to sCommand                                     // Add double Quotes to the Command if needed
    End

    Move (sCommand + " " + sParams + (Character(0))) to sCmd                        // Take Program and CmdLines
    Move (sDir + (Character(0))) to sWorkDir
    Move (AddressOf(sCmd))      to pCmd
    Move (AddressOf(sWorkDir))  to pWorkDir
    Move (OemToAnsi(pCmd,pCmd)) to iRet                                             // Convert to ANSI
    Move (OemToAnsi(pWorkDir,pWorkDir)) to iRet
    If ( ((trim(sDir)) = "") Or ((trim(sDir)) = ".") ) Move 0 to pWorkDir           // If the Directory is empty or . use the current threads directory

    Move (SizeOfType(tStartupInfo)) to StartupInf.cb
    Move STARTF_USESHOWWINDOW       to StartupInf.dwFlags
    If (bVisible)      Move SW_SHOW to StartupInf.wShowWindow                // Make the window visible or not
    Else               Move SW_HIDE to StartupInf.wShowWindow
    
    Move 0 to ProcessInf.hProcess // must initialize a var before we can get an address of it

    Move (AddressOf(StartupInf))   to pStartup
    Move (AddressOf(ProcessInf))   to pProcessInfo

    Move (CreateProcessEf(0,pCmd,0,0,FALSE,0,0,pWorkDir,pStartup,pProcessInfo)) to iRet   // Create the process
    Move (GetLastError()) to iError
    If iRet Eq 0 Function_Return -1                                                       // if creation failed return -1
    Move ProcessInf.hProcess to hProcess                                                  // Take the Process and Thread handles
    Move ProcessInf.hThread  to hThread
    If bWaitForFinished Begin                                                             // Wait for the process finished
        Move (ZeroString(32))                                      to sExitCode
        Move (GetExitCodeProcessEf(hProcess,AddressOf(sExitCode))) to iRet                // Get the Process Exit Code
        If iRet Eq 0 Begin                                                                // Return 0 if the Exit Code could not be retrieved
            If hProcess Move (CloseHandleEf(hProcess)) to iRet                            // Take care to Destroy the Handles
            If hThread  Move (CloseHandleEf(hThread))  to iRet
            Function_Return 0
        End
        Move (BytesToDword(sExitCode,1)) to iExitCode
        While iExitCode Eq STILL_ACTIVE                                                   // Loop as long the Exit code is STILL_ACTIVE
            Move (SleepEf(100)) to iRet                                                   // Very interesting how much faster the program is executed by this line :-)
            Move (ZeroString(32))                                      to sExitCode
            Move (GetExitCodeProcessEf(hProcess,AddressOf(sExitCode))) to iRet            // All the same as above
            If iRet Eq 0 Begin
                If hProcess Move (CloseHandleEf(hProcess)) to iRet
                If hThread  Move (CloseHandleEf(hThread))  to iRet
                Function_Return 0
            End
            Move (BytesToDword(sExitCode,1)) to iExitCode
        Loop
        If hProcess Move (CloseHandleEf(hProcess)) to iRet                                // Destroy the handles
        If hThread  Move (CloseHandleEf(hThread))  to iRet
        Function_Return iExitCode                                                         // Return the delivered exit-code
    End
    Move ProcessInf.dwProcessID to iID                                                    // if not waiting return the delivered process-id
    If hProcess Move (CloseHandleEf(hProcess)) to iRet                                    // Destroy the handles
    If hThread  Move (CloseHandleEf(hThread))  to iRet
    Function_Return iID
End_Function